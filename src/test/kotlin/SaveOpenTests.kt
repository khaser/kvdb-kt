import output.Msg
import java.io.ByteArrayOutputStream
import java.io.PrintStream
import DB.*
import kotlin.test.*

internal class SaveOpenTests {

    val standardOut = System.out

    @BeforeTest
    @AfterTest
    fun setUp(){
        System.setOut(standardOut)
    }

    @Test
    fun openFileWithoutPermissions() {
        val fileName = fileNameWithoutPermission
        val stream = ByteArrayOutputStream().also {System.setOut(PrintStream(it))}
        val db = saveOpenDB(fileName)
        val correctStream = ByteArrayOutputStream().also {System.setOut(PrintStream(it))}
        output.println(Msg.FILE_NOT_AVAILABLE, fileName)
        assertEquals(null, db)
        assertEquals(correctStream.toString().trim(), stream.toString().trim())
        System.setOut(standardOut)
    }

    @Test
    fun openNonExistedFile() {
        val stream = ByteArrayOutputStream().also {System.setOut(PrintStream(it))}
        val fileName = unexistedFileName
        val db = saveOpenDB(fileName)
        val correctStream = ByteArrayOutputStream().also {System.setOut(PrintStream(it))}
        output.println(Msg.FILE_NOT_EXIST, fileName)
        assertEquals(null, db)
        assertEquals(correctStream.toString().trim(), stream.toString().trim())
        System.setOut(standardOut)
    }


    @Test
    fun openDamagedFile() {
        val stream = ByteArrayOutputStream().also {System.setOut(PrintStream(it))}
        val fileName = configDamagedFileName
        val db = saveOpenDB(fileName)
        val correctStream = ByteArrayOutputStream().also {System.setOut(PrintStream(it))}
        output.println(Msg.FILE_DAMAGED, fileName)
        assertEquals(null, db)
        assertEquals(correctStream.toString().trim(), stream.toString().trim())
        System.setOut(standardOut)
    }
}