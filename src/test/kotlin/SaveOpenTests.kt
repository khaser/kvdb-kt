import output.Msg
import java.io.ByteArrayOutputStream
import java.io.PrintStream
import DB.*
import kotlin.test.*

class SaveOpenTests {

    @Test
    fun openFileWithoutPermissions() {
        val standardOut = System.out
        val stream = ByteArrayOutputStream()
        System.setOut(PrintStream(stream))
        val fileName = "$testDir/fileWithoutPermission.db"
        val db = saveOpenDB(fileName)
        val correctStream = ByteArrayOutputStream()
        System.setOut(PrintStream(correctStream))
        output.println(Msg.FILE_NOT_AVAILABLE, fileName)
        assertEquals(null, db)
        assertEquals(correctStream.toString().trim(), stream.toString().trim())
        System.setOut(standardOut)
    }

    @Test
    fun openNonExistedFile() {
        val standardOut = System.out
        val stream = ByteArrayOutputStream()
        System.setOut(PrintStream(stream))
        val fileName = "$testDir/unexisted.db"
        val db = saveOpenDB(fileName)
        val correctStream = ByteArrayOutputStream()
        System.setOut(PrintStream(correctStream))
        output.println(Msg.FILE_NOT_EXIST, fileName)
        assertEquals(null, db)
        assertEquals(correctStream.toString().trim(), stream.toString().trim())
        System.setOut(standardOut)
    }


    @Test
    fun openDamagedFile() {
        val standardOut = System.out
        val stream = ByteArrayOutputStream()
        System.setOut(PrintStream(stream))
        val fileName = "$testDir/damaged.db"
        val db = saveOpenDB(fileName)
        val correctStream = ByteArrayOutputStream()
        System.setOut(PrintStream(correctStream))
        output.println(Msg.FILE_DAMAGED, fileName)
        assertEquals(null, db)
        assertEquals(correctStream.toString().trim(), stream.toString().trim())
        System.setOut(standardOut)
    }
}